#!/usr/bin/env ruby
# coding: utf-8

require 'optparse'
require 'gruff'

opt = OptionParser.new()
options = {}
opt.on('-o output', '(必須)出力先のパス') {|v| options[:output] = v}
opt.on('-i input', '(必須)入力ファイルのパス') {|v| options[:input] = v}
opt.on('-f font', 'フォントファイルのパス') {|v| options[:font] = v}
opt.on('-t title', 'グラフのタイトル') {|v| options[:title] = v}
opt.on('-s', '遅延を秒単位で集計するか(デフォルトだとミリ秒単位)'){|v| options[:sec] = true}
opt.on('--count', '遅延した回数を計算する') {|v| options[:count] = true}
opt.on('--max', '遅延の最大ミリ秒を計算する') {|v| options[:max] = true}
opt.on('--avg', '遅延の平均ミリ秒を計算する') {|v| options[:avg] = true}
opt.on('--all', '全てのチャートを描画する') {|v| options[:all] = true}
opt.parse!(ARGV)

output = options[:output]
input = options[:input]
font = options[:font]
title = options[:title] || 'summary'

if output.nil?
    STDERR.puts("output path is not given.")
    exit(1)
end

if input.nil?
    STDERR.puts("input file is not given.")
    exit(1)
end

unless File.exist?(input)
    STDERR.puts("#{input} does not exist.")
    exit(1)
end

if File.exist?(output)
    STDERR.puts("#{output} already exist.")
    exit(1)
end

counts = Hash.new(0)
max = Hash.new(0)
avg = Hash.new(0)

data = {}
File.read(input).each_line do |line|
    next unless line =~ /unavailable/
    cols = line.split(' ')
    time = Time.at(cols[0].to_i)
    duration = cols[2].to_i
    (data[time] ||= []).push(duration)
end
base = data.first.first.to_i
count = data.values.map{|v| v.size}
max = data.values.map{|v| v.max / 1000.0}
avg = data.values.map{|v| v.inject(0){|s, d| s + d} / v.size / 1000.0}
max = max.map{|m| m /= 1000.0} if options[:sec]
avg = avg.map{|a| a /= 1000.0} if options[:sec]
max = max.map{|m| m.ceil}
avg = avg.map{|a| a.ceil}
labels = {}
label_span = data.size / 15 + 1
data.keys.each_with_index{|k, i|
    next unless (i % label_span) == 0
    labels[i] = (k.to_i - base).to_s
}

g = Gruff::Line.new()
g.title = title
g.font = font if font
g.data('count', count) if options[:count] || options[:all]
g.data('max', max) if options[:max] || options[:all]
g.data('avg', avg) if options[:avg] || options[:all]
g.labels = labels
g.minimum_value = 0
g.theme_pastel()
g.write(output)
